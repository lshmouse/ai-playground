image:
  repository: liushaohui/ray
  tag: 2.3.0
  pullPolicy: Always
nameOverride: "bigdata"
ingress:
  enabled: true
  host: ray-cluster-bigdata.ingress.k8s.cn
head:
  resources:
    limits:
      cpu: 4
      memory: "8G"
    requests:
      cpu: 4
      memory: "8G"
worker:
  replicas: 1
  minReplicas: 1
  maxReplicas: 3
  image:
    repository: liushaohui/ray
    tag: 2.3.0-py38-cu112
    pullPolicy: Always
  nodeSelector:
    app: run-analysis-gpu
  tolerations:
    - effect: NoExecute
      key: spots-node
      operator: Exists
  resources:
    limits:
      cpu: 4
      memory: "16G"
    requests:
      cpu: 4
      memory: "16G"
additionalWorkerGroups:
  spotGroup:
    disabled: true
    replicas: 1
    minReplicas: 1
    maxReplicas: 3
    labels: {}
    serviceAccountName: ""
    rayStartParams:
      block: 'true'
    initContainerImage: 'busybox:1.28' # Enable users to specify the image for init container. Users can pull the busybox image from their private repositories.
    # Security context for the init container.
    initContainerSecurityContext: {}
    # containerEnv specifies environment variables for the Ray container,
    # Follows standard K8s container env schema.
    containerEnv: []
    # - name: EXAMPLE_ENV
    #   value: "1"
    envFrom: []
    # - secretRef:
    #     name: my-env-secret
    # ports optionally allows specifying ports for the Ray container.
    # ports: []

    # resource requests and limits for the Ray head container.
    # Modify as needed for your application.
    # Note that the resources in this example are much too small for production;
    # we don't recommend allocating less than 8G memory for a Ray pod in production.
    # Ray pods should be sized to take up entire K8s nodes when possible.
    # Always set CPU and memory limits for Ray pods.
    # It is usually best to set requests equal to limits.
    # See https://docs.ray.io/en/latest/cluster/kubernetes/user-guides/config.html#resources
    # for further guidance.
    resources:
      limits:
        cpu: 1
        memory: "1G"
      requests:
        cpu: 1
        memory: "1G"
    annotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Ray container security context.
    securityContext: {}
    volumes:
      - name: log-volume
        emptyDir: {}
        # Ray writes logs to /tmp/ray/session_latests/logs
    volumeMounts:
      - mountPath: /tmp/ray
        name: log-volume
    sidecarContainers: []
    # See docs/guidance/pod-command.md for more details about how to specify
    # container command for worker Pod.
    command: []
    args: []
